--- LuaState.java
+++ LuaState.java
@@ -129,7 +129,6 @@
 	/**
 	 * The currently active {@link YieldThreader}.
 	 */
-	final YieldThreader threader;
 
 	/**
 	 * If this state has been abandoned, and threads should be cleaned up.
@@ -161,7 +160,6 @@
 		this.random = builder.random;
 		this.debug = builder.debug;
 		this.timezone = builder.timezone;
-		this.threader = new YieldThreader(builder.coroutineExecutor);
 		this.reportError = builder.reportError;
 	}
 
@@ -236,6 +234,7 @@
 			out.append("\n");
 		}
 
+		/*
 		for (Thread thread : threader.threads) {
 			out.append("Thread ").append(thread.getName()).append(" is currently ").append(thread.getState()).append('\n');
 
@@ -246,6 +245,7 @@
 				out.append("  at ").append(element).append('\n');
 			}
 		}
+		*/
 	}
 
 	@Deprecated
@@ -265,12 +265,14 @@
 	 * A mutable builder for {@link LuaState}s.
 	 */
 	public static class Builder {
+		/*
 		private static final AtomicInteger coroutineCount = new AtomicInteger();
 		private static final Executor defaultCoroutineExecutor = Executors.newCachedThreadPool(command -> {
 			Thread thread = new Thread(command, "Coroutine-" + coroutineCount.getAndIncrement());
 			thread.setDaemon(true);
 			return thread;
 		});
+		*/
 
 		private InputStream stdin = System.in;
 		private PrintStream stdout = System.out;
@@ -280,12 +282,11 @@
 		private LuaTable nilMetatable;
 		private LuaTable functionMetatable;
 		private LuaTable threadMetatable;
-		private ResourceManipulator resourceManipulator = new FileResourceManipulator();
+		private ResourceManipulator resourceManipulator = new org.squiddev.cobalt.lib.platform.VoidResourceManipulator();
 		private LoadState.LuaCompiler compiler = LuaC.INSTANCE;
 		private Random random = new Random();
 		private DebugHandler debug = DebugHandler.INSTANCE;
 		private TimeZone timezone = TimeZone.getDefault();
-		private Executor coroutineExecutor = defaultCoroutineExecutor;
 		private ErrorReporter reportError;
 
 		/**
@@ -457,11 +458,13 @@
 		 * @param coroutineExecutor The new executor
 		 * @return This builder
 		 */
+		/*
 		public Builder coroutineExecutor(Executor coroutineExecutor) {
 			if (coroutineExecutor == null) throw new NullPointerException("coroutineExecutor cannot be null");
 			this.coroutineExecutor = coroutineExecutor;
 			return this;
 		}
+		*/
 
 		@Deprecated
 		public Builder errorReporter(Consumer<Throwable> reporter) {
