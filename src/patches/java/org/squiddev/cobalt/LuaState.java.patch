--- LuaState.java
+++ LuaState.java
@@ -125,7 +125,6 @@
 	/**
 	 * The currently active {@link YieldThreader}.
 	 */
-	final YieldThreader threader;
 
 	/**
 	 * If this state has been abandoned, and threads should be cleaned up.
@@ -152,7 +151,6 @@
 		this.random = builder.random;
 		this.debug = builder.debug;
 		this.timezone = builder.timezone;
-		this.threader = new YieldThreader(builder.coroutineExecutor);
 	}
 
 	/**
@@ -209,12 +207,14 @@
 	 * A mutable builder for {@link LuaState}s.
 	 */
 	public static class Builder {
+		/*
 		private static final AtomicInteger coroutineCount = new AtomicInteger();
 		private static final Executor defaultCoroutineExecutor = Executors.newCachedThreadPool(command -> {
 			Thread thread = new Thread(command, "Coroutine-" + coroutineCount.getAndIncrement());
 			thread.setDaemon(true);
 			return thread;
 		});
+		*/
 
 		private InputStream stdin = System.in;
 		private PrintStream stdout = System.out;
@@ -224,12 +224,11 @@
 		private LuaTable nilMetatable;
 		private LuaTable functionMetatable;
 		private LuaTable threadMetatable;
-		private ResourceManipulator resourceManipulator = new FileResourceManipulator();
+		private ResourceManipulator resourceManipulator = new org.squiddev.cobalt.lib.platform.VoidResourceManipulator();
 		private LoadState.LuaCompiler compiler = LuaC.INSTANCE;
 		private Random random = new Random();
 		private DebugHandler debug = DebugHandler.INSTANCE;
 		private TimeZone timezone = TimeZone.getDefault();
-		private Executor coroutineExecutor = defaultCoroutineExecutor;
 
 		/**
 		 * Build a Lua state from this builder
@@ -401,10 +400,12 @@
 		 * @param coroutineExecutor The new executor
 		 * @return This builder
 		 */
+		/*
 		public Builder coroutineExecutor(Executor coroutineExecutor) {
 			if (coroutineExecutor == null) throw new NullPointerException("coroutineExecutor cannot be null");
 			this.coroutineExecutor = coroutineExecutor;
 			return this;
 		}
+		*/
 	}
 }
