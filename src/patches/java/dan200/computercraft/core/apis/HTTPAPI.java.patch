--- HTTPAPI.java
+++ HTTPAPI.java
@@ -13,10 +13,6 @@
 import dan200.computercraft.core.apis.http.*;
 import dan200.computercraft.core.apis.http.request.HttpRequest;
 import dan200.computercraft.core.apis.http.websocket.Websocket;
-import io.netty.handler.codec.http.DefaultHttpHeaders;
-import io.netty.handler.codec.http.HttpHeaderNames;
-import io.netty.handler.codec.http.HttpHeaders;
-import io.netty.handler.codec.http.HttpMethod;
 
 import javax.annotation.Nonnull;
 import java.net.URI;
@@ -24,6 +20,7 @@
 import java.util.Locale;
 import java.util.Map;
 import java.util.Optional;
+import java.util.*;
 
 import static dan200.computercraft.core.apis.TableHelper.*;
 
@@ -35,9 +32,10 @@
  */
 public class HTTPAPI implements ILuaAPI
 {
+    private static final String[] VERBS = new String[]{"DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"};
+
     private final IAPIEnvironment apiEnvironment;
 
-    private final ResourceGroup<CheckUrl> checkUrls = new ResourceGroup<>();
     private final ResourceGroup<HttpRequest> requests = new ResourceQueue<>( () -> ComputerCraft.httpMaxRequests );
     private final ResourceGroup<Websocket> websockets = new ResourceGroup<>( () -> ComputerCraft.httpMaxWebsockets );
 
@@ -55,7 +53,6 @@
     @Override
     public void startup()
     {
-        checkUrls.startup();
         requests.startup();
         websockets.startup();
     }
@@ -63,7 +60,6 @@
     @Override
     public void shutdown()
     {
-        checkUrls.shutdown();
         requests.shutdown();
         websockets.shutdown();
     }
@@ -105,17 +101,17 @@
             redirect = true;
         }
 
-        HttpHeaders headers = getHeaders( headerTable );
+        Map<String, String> headers = getHeaders( headerTable );
 
-        HttpMethod httpMethod;
+        String httpMethod;
         if( requestMethod == null )
         {
-            httpMethod = postString == null ? HttpMethod.GET : HttpMethod.POST;
+            httpMethod = postString == null ? "GET" : "POST";
         }
         else
         {
-            httpMethod = HttpMethod.valueOf( requestMethod.toUpperCase( Locale.ROOT ) );
-            if( httpMethod == null || requestMethod.equalsIgnoreCase( "CONNECT" ) )
+            httpMethod = requestMethod.toUpperCase();
+            if( Arrays.binarySearch(VERBS, httpMethod) == -1 )
             {
                 throw new LuaException( "Unsupported HTTP method" );
             }
@@ -142,8 +138,8 @@
     {
         try
         {
-            URI uri = HttpRequest.checkUri( address );
-            new CheckUrl( checkUrls, apiEnvironment, address, uri ).queue( CheckUrl::run );
+            HttpRequest.checkUri( address );
+            apiEnvironment.queueEvent("http_check", address, true);
 
             return new Object[] { true };
         }
@@ -161,7 +157,7 @@
             throw new LuaException( "Websocket connections are disabled" );
         }
 
-        HttpHeaders headers = getHeaders( headerTbl.orElse( Collections.emptyMap() ) );
+        Map<String, String> headers = getHeaders( headerTbl.orElse( Collections.emptyMap() ) );
 
         try
         {
@@ -180,9 +176,9 @@
     }
 
     @Nonnull
-    private HttpHeaders getHeaders( @Nonnull Map<?, ?> headerTable ) throws LuaException
+    private Map<String, String> getHeaders( @Nonnull Map<?, ?> headerTable ) throws LuaException
     {
-        HttpHeaders headers = new DefaultHttpHeaders();
+        Map<String, String> headers = new HashMap<>();
         for( Map.Entry<?, ?> entry : headerTable.entrySet() )
         {
             Object value = entry.getValue();
@@ -190,7 +186,7 @@
             {
                 try
                 {
-                    headers.add( (String) entry.getKey(), value );
+                    headers.put( ((String) entry.getKey()).toLowerCase(), (String)value );
                 }
                 catch( IllegalArgumentException e )
                 {
@@ -199,9 +195,9 @@
             }
         }
 
-        if( !headers.contains( HttpHeaderNames.USER_AGENT ) )
+        if( !headers.containsKey( "user-agent" ) )
         {
-            headers.set( HttpHeaderNames.USER_AGENT, apiEnvironment.getComputerEnvironment().getUserAgent() );
+            headers.put( "user-agent", apiEnvironment.getComputerEnvironment().getUserAgent() );
         }
         return headers;
     }
