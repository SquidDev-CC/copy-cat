--- Websocket.java
+++ Websocket.java
@@ -9,11 +9,11 @@
 import dan200.computercraft.ComputerCraft;
 import dan200.computercraft.core.apis.IAPIEnvironment;
 import dan200.computercraft.core.apis.http.HTTPRequestException;
-import dan200.computercraft.core.apis.http.NetworkUtils;
 import dan200.computercraft.core.apis.http.Resource;
 import dan200.computercraft.core.apis.http.ResourceGroup;
 import dan200.computercraft.core.apis.http.options.Options;
 import dan200.computercraft.shared.util.IoUtil;
+/*
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
@@ -29,6 +29,10 @@
 import io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;
 import io.netty.handler.codec.http.websocketx.WebSocketVersion;
 import io.netty.handler.ssl.SslContext;
+*/
+import cc.squiddev.cct.http.HttpHelpers;
+import cc.squiddev.cct.js.WebsocketClient;
+import java.util.Map;
 
 import java.lang.ref.WeakReference;
 import java.net.InetSocketAddress;
@@ -52,16 +56,14 @@
     static final String CLOSE_EVENT = "websocket_closed";
     static final String MESSAGE_EVENT = "websocket_message";
 
-    private Future<?> executorFuture;
-    private ChannelFuture connectFuture;
     private WeakReference<WebsocketHandle> websocketHandle;
 
     private final IAPIEnvironment environment;
     private final URI uri;
     private final String address;
-    private final HttpHeaders headers;
+    private final Map<String, String> headers;
 
-    public Websocket( ResourceGroup<Websocket> limiter, IAPIEnvironment environment, URI uri, String address, HttpHeaders headers )
+    public Websocket( ResourceGroup<Websocket> limiter, IAPIEnvironment environment, URI uri, String address, Map<String, String> headers )
     {
         super( limiter );
         this.environment = environment;
@@ -117,7 +119,7 @@
     public void connect()
     {
         if( isClosed() ) return;
-        executorFuture = NetworkUtils.EXECUTOR.submit( this::doConnect );
+        doConnect();
         checkClosed();
     }
 
@@ -128,6 +130,8 @@
 
         try
         {
+            HttpHelpers.makeWebsocket(this, uri);
+            /*
             boolean ssl = uri.getScheme().equalsIgnoreCase( "wss" );
             InetSocketAddress socketAddress = NetworkUtils.getAddress( uri, ssl );
             Options options = NetworkUtils.getOptions( uri.getHost(), socketAddress );
@@ -170,22 +174,19 @@
                 .addListener( c -> {
                     if( !c.isSuccess() ) failure( NetworkUtils.toFriendlyError( c.cause() ) );
                 } );
+            */
 
             // Do an additional check for cancellation
             checkClosed();
         }
-        catch( HTTPRequestException e )
-        {
-            failure( e.getMessage() );
-        }
         catch( Exception e )
         {
-            failure( NetworkUtils.toFriendlyError( e ) );
+            failure( "Could not connect" );
             if( ComputerCraft.logComputerErrors ) ComputerCraft.log.error( "Error in websocket", e );
         }
     }
 
-    void success( Channel channel, Options options )
+    public void success( WebsocketClient channel, Options options )
     {
         if( isClosed() ) return;
 
@@ -196,12 +197,12 @@
         checkClosed();
     }
 
-    void failure( String message )
+    public void failure( String message )
     {
         if( tryClose() ) environment.queueEvent( FAILURE_EVENT, address, message );
     }
 
-    void close( int status, String reason )
+    public void close( int status, String reason )
     {
         if( tryClose() )
         {
@@ -216,9 +217,6 @@
     {
         super.dispose();
 
-        executorFuture = closeFuture( executorFuture );
-        connectFuture = closeChannel( connectFuture );
-
         WeakReference<WebsocketHandle> websocketHandleRef = websocketHandle;
         WebsocketHandle websocketHandle = websocketHandleRef == null ? null : websocketHandleRef.get();
         IoUtil.closeQuietly( websocketHandle );
