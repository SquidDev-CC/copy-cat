--- CobaltLuaMachine.java
+++ CobaltLuaMachine.java
@@ -44,12 +44,14 @@
 public class CobaltLuaMachine implements ILuaMachine {
     private static final Logger LOG = LoggerFactory.getLogger(CobaltLuaMachine.class);
 
+    /*
     private static final ThreadPoolExecutor COROUTINES = new ThreadPoolExecutor(
         0, Integer.MAX_VALUE,
         5L, TimeUnit.MINUTES,
         new SynchronousQueue<>(),
         ThreadUtils.factory("Coroutine")
     );
+    */
 
     private static final LuaMethod FUNCTION_METHOD = (target, context, args) -> ((ILuaFunction) target).call(args);
 
@@ -73,6 +75,7 @@
         var state = this.state = LuaState.builder()
             .resourceManipulator(new VoidResourceManipulator())
             .debug(debug)
+            /*
             .coroutineExecutor(command -> {
                 metrics.observe(Metrics.COROUTINES_CREATED);
                 COROUTINES.execute(() -> {
@@ -83,6 +86,7 @@
                     }
                 });
             })
+            */
             .errorReporter((e, msg) -> {
                 if (LOG.isErrorEnabled(Logging.VM_ERROR)) {
                     LOG.error(Logging.VM_ERROR, "Error occurred in the Lua runtime. Computer will continue to execute:\n{}", msg.get(), e);
@@ -230,7 +234,7 @@
             table.rawset(method, new ResultInterpreterFunction(this, LuaMethod.DYNAMIC.get(i), object, context, method));
         }
 
-        ObjectSource.allMethods(LuaMethod.GENERATOR, object, (instance, method) ->
+        ObjectSource.allMethods(object, (instance, method) ->
             table.rawset(method.getName(), method.nonYielding()
                 ? new BasicFunction(this, method.getMethod(), instance, context, method.getName())
                 : new ResultInterpreterFunction(this, method.getMethod(), instance, context, method.getName())));
@@ -406,8 +410,9 @@
             if (isPaused) resetPaused(ds, di);
 
             // We check our current pause/abort state every 128 instructions.
-            if ((count = (count + 1) & 127) == 0) {
+            if ((count = (count + 1) & 1023) == 0) {
                 if (timeout.isHardAborted() || state == null) throw HardAbortError.INSTANCE;
+                timeout.refresh(); // Need to explicitly refresh as no multi-threading
                 if (timeout.isPaused()) handlePause(ds, di);
                 if (timeout.isSoftAborted()) handleSoftAbort();
             }
@@ -419,7 +424,7 @@
         public void poll() throws LuaError {
             var state = CobaltLuaMachine.this.state;
             if (timeout.isHardAborted() || state == null) throw HardAbortError.INSTANCE;
-            if (timeout.isPaused()) LuaThread.suspendBlocking(state);
+            timeout.refresh(); // Need to explicitly refresh as no multi-threading
             if (timeout.isSoftAborted()) handleSoftAbort();
         }
 
