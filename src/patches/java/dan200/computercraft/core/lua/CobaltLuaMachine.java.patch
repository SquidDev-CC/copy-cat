--- CobaltLuaMachine.java
+++ CobaltLuaMachine.java
@@ -43,12 +43,14 @@
 
 public class CobaltLuaMachine implements ILuaMachine
 {
+    /*
     private static final ThreadPoolExecutor COROUTINES = new ThreadPoolExecutor(
         0, Integer.MAX_VALUE,
         5L, TimeUnit.MINUTES,
         new SynchronousQueue<>(),
         ThreadUtils.factory( "Coroutine" )
     );
+    */
 
     private static final LuaMethod FUNCTION_METHOD = ( target, context, args ) -> ((ILuaFunction) target).call( args );
 
@@ -74,6 +76,7 @@
         LuaState state = this.state = LuaState.builder()
             .resourceManipulator( new VoidResourceManipulator() )
             .debug( debug )
+            /*
             .coroutineExecutor( command -> {
                 Tracking.addValue( this.computer, TrackingField.COROUTINES_CREATED, 1 );
                 COROUTINES.execute( () -> {
@@ -87,6 +90,7 @@
                     }
                 } );
             } )
+            */
             .build();
 
         globals = new LuaTable();
@@ -240,7 +244,7 @@
             table.rawset( method, new ResultInterpreterFunction( this, LuaMethod.DYNAMIC.get( i ), object, context, method ) );
         }
 
-        ObjectSource.allMethods( LuaMethod.GENERATOR, object, ( instance, method ) ->
+        ObjectSource.allMethods( object, ( instance, method ) ->
             table.rawset( method.getName(), method.nonYielding()
                 ? new BasicFunction( this, method.getMethod(), instance, context, method.getName() )
                 : new ResultInterpreterFunction( this, method.getMethod(), instance, context, method.getName() ) ) );
@@ -452,9 +456,10 @@
             if( isPaused ) resetPaused( ds, di );
 
             // We check our current pause/abort state every 128 instructions.
-            if( (count = (count + 1) & 127) == 0 )
+            if( (count = (count + 1) & 1023) == 0 )
             {
                 if( timeout.isHardAborted() || state == null ) throw HardAbortError.INSTANCE;
+                timeout.refresh(); // Need to explicitly refresh as no multi-threading.
                 if( timeout.isPaused() ) handlePause( ds, di );
                 if( timeout.isSoftAborted() ) handleSoftAbort();
             }
@@ -467,7 +472,7 @@
         {
             LuaState state = CobaltLuaMachine.this.state;
             if( timeout.isHardAborted() || state == null ) throw HardAbortError.INSTANCE;
-            if( timeout.isPaused() ) LuaThread.suspendBlocking( state );
+            timeout.refresh(); // Need to explicitly refresh as no multi-threading.
             if( timeout.isSoftAborted() ) handleSoftAbort();
         }
 
