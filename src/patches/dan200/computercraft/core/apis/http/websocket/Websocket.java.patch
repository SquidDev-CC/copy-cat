--- Websocket.java
+++ Websocket.java
@@ -9,23 +9,10 @@
 import dan200.computercraft.core.Logging;
 import dan200.computercraft.core.apis.IAPIEnvironment;
 import dan200.computercraft.core.apis.http.HTTPRequestException;
-import dan200.computercraft.core.apis.http.NetworkUtils;
 import dan200.computercraft.core.apis.http.Resource;
 import dan200.computercraft.core.apis.http.ResourceGroup;
 import dan200.computercraft.core.apis.http.options.Options;
 import dan200.computercraft.core.util.IoUtil;
-import io.netty.bootstrap.Bootstrap;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.socket.SocketChannel;
-import io.netty.channel.socket.nio.NioSocketChannel;
-import io.netty.handler.codec.http.HttpClientCodec;
-import io.netty.handler.codec.http.HttpHeaderNames;
-import io.netty.handler.codec.http.HttpHeaders;
-import io.netty.handler.codec.http.HttpObjectAggregator;
-import io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
-import io.netty.handler.codec.http.websocketx.WebSocketVersion;
 import cc.tweaked.web.stub.Logger;
 import cc.tweaked.web.stub.LoggerFactory;
 
@@ -33,6 +20,7 @@
 import java.lang.ref.WeakReference;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.util.Map;
 import java.util.concurrent.Future;
 
 /**
@@ -52,16 +40,14 @@
     static final String CLOSE_EVENT = "websocket_closed";
     static final String MESSAGE_EVENT = "websocket_message";
 
-    private @Nullable Future<?> executorFuture;
-    private @Nullable ChannelFuture connectFuture;
-    private @Nullable WeakReference<WebsocketHandle> websocketHandle;
+    private WeakReference<WebsocketHandle> websocketHandle;
 
     private final IAPIEnvironment environment;
     private final URI uri;
     private final String address;
-    private final HttpHeaders headers;
+    private final Map<String, String> headers;
 
-    public Websocket(ResourceGroup<Websocket> limiter, IAPIEnvironment environment, URI uri, String address, HttpHeaders headers) {
+    public Websocket(ResourceGroup<Websocket> limiter, IAPIEnvironment environment, URI uri, String address, Map<String, String> headers) {
         super(limiter);
         this.environment = environment;
         this.uri = uri;
@@ -103,7 +89,7 @@
 
     public void connect() {
         if (isClosed()) return;
-        executorFuture = NetworkUtils.EXECUTOR.submit(this::doConnect);
+        doConnect();
         checkClosed();
     }
 
@@ -112,6 +98,8 @@
         if (isClosed()) return;
 
         try {
+            cc.tweaked.web.http.HttpHelpers.makeWebsocket(this, uri);
+            /*
             var ssl = uri.getScheme().equalsIgnoreCase("wss");
             var socketAddress = NetworkUtils.getAddress(uri, ssl);
             var options = NetworkUtils.getOptions(uri.getHost(), socketAddress);
@@ -151,18 +139,17 @@
                 .addListener(c -> {
                     if (!c.isSuccess()) failure(NetworkUtils.toFriendlyError(c.cause()));
                 });
+            */
 
             // Do an additional check for cancellation
             checkClosed();
-        } catch (HTTPRequestException e) {
-            failure(NetworkUtils.toFriendlyError(e));
         } catch (Exception e) {
-            failure(NetworkUtils.toFriendlyError(e));
+            failure("Could not connect");
             LOG.error(Logging.HTTP_ERROR, "Error in websocket", e);
         }
     }
 
-    void success(Channel channel, Options options) {
+    public void success(cc.tweaked.web.js.WebsocketClient channel, Options options) {
         if (isClosed()) return;
 
         var handle = new WebsocketHandle(this, options, channel);
@@ -172,11 +159,11 @@
         checkClosed();
     }
 
-    void failure(String message) {
+    public void failure(String message) {
         if (tryClose()) environment.queueEvent(FAILURE_EVENT, address, message);
     }
 
-    void close(int status, String reason) {
+    public void close(int status, String reason) {
         if (tryClose()) {
             environment.queueEvent(CLOSE_EVENT, address,
                 Strings.isNullOrEmpty(reason) ? null : reason,
@@ -188,9 +175,6 @@
     protected void dispose() {
         super.dispose();
 
-        executorFuture = closeFuture(executorFuture);
-        connectFuture = closeChannel(connectFuture);
-
         var websocketHandleRef = websocketHandle;
         var websocketHandle = websocketHandleRef == null ? null : websocketHandleRef.get();
         IoUtil.closeQuietly(websocketHandle);
