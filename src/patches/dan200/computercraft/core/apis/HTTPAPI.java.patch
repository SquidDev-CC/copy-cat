--- HTTPAPI.java
+++ HTTPAPI.java
@@ -13,15 +13,8 @@
 import dan200.computercraft.core.apis.http.*;
 import dan200.computercraft.core.apis.http.request.HttpRequest;
 import dan200.computercraft.core.apis.http.websocket.Websocket;
-import io.netty.handler.codec.http.DefaultHttpHeaders;
-import io.netty.handler.codec.http.HttpHeaderNames;
-import io.netty.handler.codec.http.HttpHeaders;
-import io.netty.handler.codec.http.HttpMethod;
 
-import java.util.Collections;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Optional;
+import java.util.*;
 
 import static dan200.computercraft.core.apis.TableHelper.*;
 
@@ -34,7 +27,6 @@
 public class HTTPAPI implements ILuaAPI {
     private final IAPIEnvironment apiEnvironment;
 
-    private final ResourceGroup<CheckUrl> checkUrls = new ResourceGroup<>(() -> ResourceGroup.DEFAULT_LIMIT);
     private final ResourceGroup<HttpRequest> requests = new ResourceQueue<>(() -> CoreConfig.httpMaxRequests);
     private final ResourceGroup<Websocket> websockets = new ResourceGroup<>(() -> CoreConfig.httpMaxWebsockets);
 
@@ -49,14 +41,12 @@
 
     @Override
     public void startup() {
-        checkUrls.startup();
         requests.startup();
         websockets.startup();
     }
 
     @Override
     public void shutdown() {
-        checkUrls.shutdown();
         requests.shutdown();
         websockets.shutdown();
     }
@@ -95,11 +85,11 @@
 
         var headers = getHeaders(headerTable);
 
-        HttpMethod httpMethod;
+        String httpMethod;
         if (requestMethod == null) {
-            httpMethod = postString == null ? HttpMethod.GET : HttpMethod.POST;
+            httpMethod = postString == null ? "GET" : "POST";
         } else {
-            httpMethod = HttpMethod.valueOf(requestMethod.toUpperCase(Locale.ROOT));
+            httpMethod = requestMethod.toUpperCase(Locale.ROOT);
             if (httpMethod == null || requestMethod.equalsIgnoreCase("CONNECT")) {
                 throw new LuaException("Unsupported HTTP method");
             }
@@ -124,9 +114,7 @@
     public final Object[] checkURL(String address) throws LuaException {
         try {
             var uri = HttpRequest.checkUri(address);
-            if (!new CheckUrl(checkUrls, apiEnvironment, address, uri).queue(CheckUrl::run)) {
-                throw new LuaException("Too many ongoing checkUrl calls");
-            }
+            apiEnvironment.queueEvent("http_check", address, true);
 
             return new Object[]{ true };
         } catch (HTTPRequestException e) {
@@ -154,21 +142,21 @@
         }
     }
 
-    private HttpHeaders getHeaders(Map<?, ?> headerTable) throws LuaException {
-        HttpHeaders headers = new DefaultHttpHeaders();
+    private Map<String, String> getHeaders(Map<?, ?> headerTable) throws LuaException {
+        Map<String, String> headers = new HashMap<>();
         for (Map.Entry<?, ?> entry : headerTable.entrySet()) {
             var value = entry.getValue();
-            if (entry.getKey() instanceof String && value instanceof String) {
+            if (entry.getKey() instanceof String k && value instanceof String v) {
                 try {
-                    headers.add((String) entry.getKey(), value);
+                    headers.put(k.toLowerCase(), v);
                 } catch (IllegalArgumentException e) {
                     throw new LuaException(e.getMessage());
                 }
             }
         }
 
-        if (!headers.contains(HttpHeaderNames.USER_AGENT)) {
-            headers.set(HttpHeaderNames.USER_AGENT, apiEnvironment.getGlobalEnvironment().getUserAgent());
+        if (!headers.containsKey("user-agent")) {
+            headers.put("user-agent", apiEnvironment.getGlobalEnvironment().getUserAgent());
         }
         return headers;
     }
